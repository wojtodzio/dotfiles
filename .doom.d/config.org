#+TITLE: My Doom Emacs config
#+AUTHOR: Wojtek Wrona
#+EMAIL: wojtodzio@gmail.com
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link

* Lexical Binding
Use lexical-binding to speed up. [[https://nullprogram.com/blog/2016/12/22/][Why?]]
#+BEGIN_SRC emacs-lisp :comments no ;;Disable comments as this has to be the first line in the tangled file.
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC
* Personal Information
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Wojtek Wrona"
      user-mail-address "wojtodzio@gmail.com")
#+END_SRC
* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:
#+BEGIN_SRC emacs-lisp :tangle no
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_SRC
* Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC
* Org
If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC
* Line numbers
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC
* Helpers
Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.
* Dictionaries
Use SCOWL custom dictionary (http://app.aspell.net/create)
#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "en-custom")
#+END_SRC
* Web mode default indentions
#+BEGIN_SRC emacs-lisp
(setq web-mode-markup-indent-offset 2)
(setq web-mode-code-indent-offset 2)
(setq web-mode-script-padding 2)
#+END_SRC
* Projects path
#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/projects/"))
#+END_SRC
